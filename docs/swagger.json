{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/login": {
            "post": {
                "description": "This endpoint allows a user to log in by providing a valid username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in with JWT token",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "This endpoint allows a user to log in by providing a valid username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User register",
                "parameters": [
                    {
                        "description": "User register input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully registered in with JWT token",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/messages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint lists messages by providing limit and skip.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "List lists messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Messages limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Skip messages",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Receiver id",
                        "name": "receiver_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sender id",
                        "name": "sender_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "messages",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint creates a new message by providing sender id, receiver id, text, and status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Create creates a new message",
                "parameters": [
                    {
                        "description": "Message creation input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.MessageCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message id",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint gets a message by providing message id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "GetByID gets a message by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates a message by providing message id, sender id, receiver id, text, and status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Update updates an existing message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message update input, status= pending:1, approved:2, rejected:3",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.MessageUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message id",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint creates a new user by providing username, email, password, and role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create creates a new user",
                "parameters": [
                    {
                        "description": "User creation input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a user by their unique ID from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the user information",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint deletes a user by providing user id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "DeleteUser deletes an existing user",
                "responses": {
                    "200": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates a user by providing username, email, password, and role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "UpdateUser updates an existing user",
                "parameters": [
                    {
                        "description": "User update input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "basic,oauth2"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.FailureResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controller.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Login": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.MessageCreateRequest": {
            "type": "object",
            "properties": {
                "receiver_id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "model.MessageUpdateRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.Register": {
            "type": "object",
            "required": [
                "confirm_password",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.UserCreateRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "role_id",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \\\"Bearer \\\" and then your API Token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}